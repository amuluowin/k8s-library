#!/usr/bin/env php
<?php

declare(strict_types=1);

use Swow\Buffer;
use Swow\Coroutine;
use Swow\Http\Parser;
use Swow\Http\Parser\Exception as ParserException;
use Swow\Socket;
use Swow\Socket\Exception as SocketException;

use function Swow\Http\packResponse;

$host = getenv('SERVER_HOST') ?: '0.0.0.0';
$port = isset($argv[1]) ? (int)$argv[1] : (int) (getenv('SERVER_PORT') ?: 8099);

function run(string $host, int $port): void
{
    $bindFlag = Socket::BIND_FLAG_NONE | Socket::BIND_FLAG_REUSEPORT;
    $server = new Socket(Socket::TYPE_TCP);
    $server->setTcpAcceptBalance(true);
    $server->bind($host, $port, $bindFlag)->listen(81920);
    $worker_id = (int)ini_get('snowdrift.WorkerId');
    while (true) {
        try {
            $client = $server->accept();
        } catch (SocketException $exception) {
            break;
        }
        Coroutine::run(function () use ($client, $worker_id) {
            $buffer = new Buffer();
            $parser = (new Parser())->setType(Parser::TYPE_REQUEST)->setEvents(Parser::EVENT_URL | Parser::EVENT_NONE);
            $body = null;
            try {
                while (true) {
                    $length = $client->recvData($buffer);
                    if ($length === 0) {
                        break;
                    }
                    if ($length === false) {
                        break;
                    }
                    $data = '';
                    $path = '';
                    $params = [];
                    while (true) {
                        $event = $parser->execute($buffer, $data);
                        if ($event === Parser::EVENT_URL) {
                            $uriParts = \explode('?', $data, 2);
                            $path = \rawurldecode($uriParts[0]);
                            parse_str($uriParts[1] ?? '', $params);
                        } elseif ($event === Parser::EVENT_NONE) {
                            break;
                        } else {
                            if ($body === null) {
                                $body = new Buffer();
                            }
                            if ($parser->getMethod() === 'GET') {
                                if ($path === '/' || $path === '') {
                                    $wid = isset($params['wid']) ? (int)$params['wid'] : $worker_id;
                                    $num = isset($params['num']) ? (int)$params['num'] : 1;
                                    if ($num > 1) {
                                        $body->write(implode(',', \SnowDrift::NextNumId($num, $wid)));
                                    } else {
                                        $body->write((string)SnowDrift::NextId($wid));
                                    }
                                    $response = sprintf(
                                        "HTTP/1.1 200 OK\r\n" .
                                            "Connection: %s\r\n" .
                                            "Content-Length: %d\r\n\r\n" .
                                            '%s',
                                        $parser->shouldKeepAlive() ? 'Keep-Alive' : 'Closed',
                                        $body ? $body->getLength() : 0,
                                        $body ? $body->toString() : ''
                                    );
                                } else {
                                    $response = packResponse(404, [
                                        "Connection" => $parser->shouldKeepAlive() ? 'Keep-Alive' : 'Closed',
                                        "Content-Length" => 0
                                    ]);
                                }
                            } else {
                                $response = packResponse(405, [
                                    "Connection" => $parser->shouldKeepAlive() ? 'Keep-Alive' : 'Closed',
                                    "Content-Length" => 0
                                ]);
                            }
                            $client->sendString($response);
                            if ($body !== null) {
                                $body->clear();
                            }
                            break;
                        }
                    }
                    if (!$parser->shouldKeepAlive()) {
                        break;
                    }
                    $parser->reset();
                }
            } catch (SocketException $exception) {
            } catch (ParserException $exception) {
            } finally {
                $parser->reset();
                $client->close();
            }
        });
    }
}

$pnum = (int)trim(shell_exec("cat /proc/cpuinfo | grep 'cpu cores' | wc -l"));
pcntl_signal(SIGCHLD, SIG_IGN);
for ($i = 0; $i < $pnum; $i++) {
    $pid = pcntl_fork(); // 开启新进程
    if ($pid === -1) {
        die("could not fork"); // 开启失败
    } elseif ($pid) {
        echo "$pid started listen on $port" . PHP_EOL;
    } else {
        cli_set_process_title("swow idgen $i");
        run($host, $port);
    }
}

while (true) {
    sleep(1);
}
